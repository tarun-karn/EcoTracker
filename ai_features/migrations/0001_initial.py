# Generated by Django 5.0.7 on 2025-09-21 07:58

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AIInsightCache',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cache_key', models.CharField(max_length=255, unique=True)),
                ('data', models.JSONField()),
                ('expires_at', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommendation_type', models.CharField(choices=[('ACTIVITY', 'Activity Suggestion'), ('EFFICIENCY', 'Efficiency Tip'), ('GOAL', 'Goal Setting'), ('CHALLENGE', 'Challenge'), ('MOTIVATION', 'Motivational Message')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_recommendations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DynamicChallenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('challenge_type', models.CharField(choices=[('WEEKLY', 'Weekly Challenge'), ('MONTHLY', 'Monthly Challenge'), ('TEAM', 'Team Challenge'), ('PERSONAL', 'Personal Milestone')], max_length=15)),
                ('difficulty', models.CharField(choices=[('EASY', 'Easy'), ('MEDIUM', 'Medium'), ('HARD', 'Hard'), ('EXPERT', 'Expert')], max_length=10)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('target_value', models.IntegerField()),
                ('target_metric', models.CharField(max_length=20)),
                ('reward_points', models.IntegerField()),
                ('current_progress', models.IntegerField(default=0)),
                ('is_completed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dynamic_challenges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EfficiencyInsight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('insight_type', models.CharField(choices=[('USER_EFFICIENCY', 'User Overall Efficiency'), ('ACTIVITY_EFFICIENCY', 'Activity Type Efficiency'), ('TEAM_COMPARISON', 'Team Comparison'), ('IMPROVEMENT_TIP', 'Improvement Suggestion')], max_length=25)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('efficiency_score', models.FloatField()),
                ('comparison_data', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='efficiency_insights', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserAIPreferences',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enable_recommendations', models.BooleanField(default=True)),
                ('enable_predictions', models.BooleanField(default=True)),
                ('enable_challenges', models.BooleanField(default=True)),
                ('notification_frequency', models.CharField(choices=[('DAILY', 'Daily'), ('WEEKLY', 'Weekly'), ('MONTHLY', 'Monthly')], default='WEEKLY', max_length=10)),
                ('preferred_challenge_difficulty', models.CharField(choices=[('EASY', 'Easy'), ('MEDIUM', 'Medium'), ('HARD', 'Hard'), ('EXPERT', 'Expert')], default='MEDIUM', max_length=10)),
                ('openai_enabled', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ai_preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'AI Preferences',
                'verbose_name_plural': 'AI Preferences',
            },
        ),
        migrations.CreateModel(
            name='CarbonPrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prediction_date', models.DateField()),
                ('predicted_daily_savings', models.FloatField()),
                ('predicted_weekly_savings', models.FloatField()),
                ('predicted_monthly_savings', models.FloatField()),
                ('confidence_score', models.FloatField(default=0.0)),
                ('actual_savings', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='carbon_predictions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-prediction_date'],
                'unique_together': {('user', 'prediction_date')},
            },
        ),
    ]
